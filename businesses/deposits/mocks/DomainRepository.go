// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	deposits "Pinjem/businesses/deposits"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DomainRepository is an autogenerated mock type for the DomainRepository type
type DomainRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, domain
func (_m *DomainRepository) Create(ctx context.Context, domain deposits.Domain) (deposits.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 deposits.Domain
	if rf, ok := ret.Get(0).(func(context.Context, deposits.Domain) deposits.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(deposits.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, deposits.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *DomainRepository) GetAll(ctx context.Context) ([]deposits.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []deposits.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []deposits.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deposits.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: ctx, userId
func (_m *DomainRepository) GetByUserId(ctx context.Context, userId uint) (deposits.Domain, error) {
	ret := _m.Called(ctx, userId)

	var r0 deposits.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) deposits.Domain); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(deposits.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUp provides a mock function with given fields: ctx, userId, amount
func (_m *DomainRepository) TopUp(ctx context.Context, userId uint, amount uint) (deposits.Domain, error) {
	ret := _m.Called(ctx, userId, amount)

	var r0 deposits.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) deposits.Domain); ok {
		r0 = rf(ctx, userId, amount)
	} else {
		r0 = ret.Get(0).(deposits.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, userId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, userId, amount, usedAmount
func (_m *DomainRepository) Update(ctx context.Context, userId uint, amount uint, usedAmount uint) (deposits.Domain, error) {
	ret := _m.Called(ctx, userId, amount, usedAmount)

	var r0 deposits.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, uint) deposits.Domain); ok {
		r0 = rf(ctx, userId, amount, usedAmount)
	} else {
		r0 = ret.Get(0).(deposits.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint, uint) error); ok {
		r1 = rf(ctx, userId, amount, usedAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
