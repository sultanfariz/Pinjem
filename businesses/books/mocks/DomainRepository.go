// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	books "Pinjem/businesses/books"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DomainRepository is an autogenerated mock type for the DomainRepository type
type DomainRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, domain
func (_m *DomainRepository) Create(ctx context.Context, domain books.Domain) (books.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 books.Domain
	if rf, ok := ret.Get(0).(func(context.Context, books.Domain) books.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(books.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, books.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *DomainRepository) GetAll(ctx context.Context) ([]books.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []books.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []books.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByISBN provides a mock function with given fields: ctx, isbn
func (_m *DomainRepository) GetByISBN(ctx context.Context, isbn string) (books.Domain, error) {
	ret := _m.Called(ctx, isbn)

	var r0 books.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) books.Domain); ok {
		r0 = rf(ctx, isbn)
	} else {
		r0 = ret.Get(0).(books.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, isbn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *DomainRepository) GetById(ctx context.Context, id string) (books.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 books.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) books.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(books.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, bookId, status
func (_m *DomainRepository) UpdateStatus(ctx context.Context, bookId string, status bool) (books.Domain, error) {
	ret := _m.Called(ctx, bookId, status)

	var r0 books.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) books.Domain); ok {
		r0 = rf(ctx, bookId, status)
	} else {
		r0 = ret.Get(0).(books.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, bookId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
